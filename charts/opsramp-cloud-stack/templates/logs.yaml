{{ if eq .Values.logsCollector.enabled true }}
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ include "opsramp-cloud-stack.fullname" . }}-logs
  labels:
    {{- include "opsramp-cloud-stack.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install
spec:
  mode: daemonset
  volumeMounts:
    - mountPath: /var/log
      name: varlog
      readOnly: true
    - mountPath: /var/lib/docker/containers
      name: varlibdockercontainers
      readOnly: true
  volumes:
    - name: varlog
      hostPath:
        path: /var/log
    - name: varlibdockercontainers
      hostPath:
        path: /var/lib/docker/containers
  env:
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: K8S_NODE_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    - name: K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: K8S_POD_UID
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.uid
    - name: K8S_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: "k8s.cluster.name={{ default "unknown" .Values.ClusterName }},k8s.node.name=$(K8S_NODE_NAME)"
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: {{ default "0.0.0.0:4317" .Values.OpenTelemetryCollector.GRPC | quote }}
          http:
            endpoint: {{ default "0.0.0.0:4318" .Values.OpenTelemetryCollector.HTTP | quote }}
      filelog:
        include:
          - /var/log/pods/*/*/*.log
        include_file_path: true
        include_file_name: false
        operators:
          # Find out which format is used by kubernetes
          - type: router
            id: get-format
            routes:
              - output: parser-docker
                expr: 'body matches "^\\{"'
              - output: parser-crio
                expr: 'body matches "^[^ Z]+ "'
              - output: parser-containerd
                expr: 'body matches "^[^ Z]+Z"'
          # Parse CRI-O format
          - type: regex_parser
            id: parser-crio
            regex: "^(?P<timestamp>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<message>.*)$"
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.timestamp
              layout_type: gotime
              layout: "2006-01-02T15:04:05.999999999Z07:00"
          # Parse CRI-Containerd format
          - type: regex_parser
            id: parser-containerd
            regex: "^(?P<timestamp>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<message>.*)$"
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.timestamp
              layout: "%Y-%m-%dT%H:%M:%S.%LZ"
          # Parse Docker format
          - type: json_parser
            id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              parse_from: attributes.time
              layout: "%Y-%m-%dT%H:%M:%S.%LZ"
          - type: move
            from: attributes.message
            to: body
          # Extract metadata from file path
          - type: regex_parser
            id: extract_metadata_from_filepath
            regex: '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]{36})\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$'
            parse_from: attributes["log.file.path"]
            cache:
              # default maximum amount of Pods per Node is 110
              size: 128
          # Rename attributes
          - type: move
            from: attributes.stream
            to: attributes["log.iostream"]
          - type: move
            from: attributes.container_name
            to: resource["k8s.container.name"]
          - type: move
            from: attributes.namespace
            to: resource["k8s.namespace.name"]
          - type: move
            from: attributes.pod_name
            to: resource["k8s.pod.name"]
          - type: move
            from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
          - type: move
            from: attributes.uid
            to: resource["k8s.pod.uid"]

    processors:
      batch:
        timeout: 1s
        send_batch_size: 1000
        send_batch_max_size: 2000
      k8sattributes:
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
        extract:
          metadata:
            - k8s.cluster.uid
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
            - k8s.pod.start_time
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - container.image.tag
            - container.image.name

    exporters:
      otlp/opsramp_logs:
        endpoint: {{ include "otel.endpoint.logs" . | trim | quote }}
        headers:
          "tenantId": {{ include "otel.auth.tenantId" . | trim | quote }}
        compression: "gzip"
        tls:
          insecure: false
          insecure_skip_verify: true
        auth:
          authenticator: oauth2client

    extensions:
      oauth2client:
        client_id: {{ include "otel.auth.key" . | trim | quote }}
        client_secret: {{ include "otel.auth.secret" . | trim | quote }}
        token_url: {{ include "otel.auth.endpoint" . | trim | quote }}

    service:
      extensions:
        - oauth2client
      pipelines:
        logs:
          receivers: [ filelog, otlp ]
          processors: [ batch, k8sattributes ]
          exporters: [ otlp/opsramp_logs ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "opsramp-cloud-stack.fullname" . }}-logs
rules:
  - apiGroups: [ "" ]
    resources:
      - events
      - namespaces
      - namespaces/status
      - nodes
      - nodes/stats
      - nodes/spec
      - nodes/proxy
      - nodes/metrics
      - services
      - resourcequotas
      - replicationcontrollers
      - replicationcontrollers/status
      - endpoints
      - persistentvolumes
      - persistentvolumeclaims
      - pods
      - pods/status
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "monitoring.coreos.com" ]
    resources:
      - servicemonitors
      - podmonitors
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "discovery.k8s.io" ]
    resources:
      - endpointslices
    verbs: [ "get", "list", "watch" ]
  - nonResourceURLs: [ "/metrics", "/metrics/cadvisor" ]
    verbs: [ "get" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "opsramp-cloud-stack.fullname" . }}-logs
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "opsramp-cloud-stack.fullname" . }}-logs
subjects:
  - kind: ServiceAccount
    # quirk of the Operator
    name: "{{ include "opsramp-cloud-stack.fullname" . }}-logs-collector"
    namespace: {{ $.Release.Namespace }}
{{ end }}