apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ include "opsramp-cloud-stack.fullname" . }}-metrics
  labels:
    {{- include "opsramp-cloud-stack.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install, post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  hostNetwork: true
  volumeMounts:
    - name: hostfs
      mountPath: /hostfs
      readOnly: true
      mountPropagation: HostToContainer
  volumes:
    - name: hostfs
      hostPath:
        path: /
  env:
    - name: OTEL_K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: K8S_NODE_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    - name: K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: K8S_POD_UID
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.uid
    - name: K8S_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: "k8s.cluster.name={{ default "unknown" .Values.ClusterName }},k8s.node.name=$(K8S_NODE_NAME)"
  {{ if eq .Values.metricsCollector.enabled true }}
  replicas: {{ .Values.metricsCollector.replicas | default 1 }}
  {{ else }}
  replicas: 0
  {{ end }}
  mode: statefulset
  targetAllocator:
    enabled: true
    serviceAccount: "{{ include "opsramp-cloud-stack.fullname" . }}-metrics-collector"
    prometheusCR:
      enabled: true
  config: |
    receivers:
      prometheus:
        config:
          scrape_configs:
          {{ if .Values.metricsCollector.scrape_configs_file }}
          {{ tpl ($.Files.Get .Values.metricsCollector.scrape_configs_file) $ | nindent 10 }}
          {{ end }}
        target_allocator:
          endpoint: http://{{ include "opsramp-cloud-stack.fullname" . }}-metrics-targetallocator:80
          interval: 30s
          collector_id: ${OTEL_K8S_POD_NAME}
          http_sd_config:
            refresh_interval: 60s
      otlp:
        protocols:
          grpc:
            endpoint: {{ default "0.0.0.0:4317" .Values.OpenTelemetryCollector.GRPC | quote }}
          http:
            endpoint: {{ default "0.0.0.0:4318" .Values.OpenTelemetryCollector.HTTP | quote }}
      k8s_cluster:
        auth_type: serviceAccount
        collection_interval: 10s
        node_conditions_to_report:
          [Ready, MemoryPressure, DiskPressure, NetworkUnavailable]
        allocatable_types_to_report: [cpu, memory, storage]
      kubeletstats:
        collection_interval: "15s"
        auth_type: "serviceAccount"
        insecure_skip_verify: true
        # For this scrape to work, the RBAC must have `nodes/stats` GET access.
        endpoint: "https://${env:K8S_NODE_IP}:10250"
        extra_metadata_labels:
          - container.id
          - k8s.volume.type
        metric_groups:
          - node
          - pod
          - volume
          - container
        k8s_api_config:
          auth_type: serviceAccount
      hostmetrics:
        collection_interval: "30s"
        root_path: /hostfs
        scrapers:
          cpu:
            metrics:
              system.cpu.utilization:
                enabled: true
          disk: {}
          load: {}
          filesystem:
            metrics:
              system.filesystem.utilization:
                enabled: true
            exclude_mount_points:
              match_type: regexp
              mount_points:
                - /dev/.*
                - /proc/.*
                - /sys/.*
                - /run/k3s/containerd/.*
                - /var/lib/docker/.*
                - /var/lib/kubelet/.*
                - /snap/.*
            exclude_fs_types:
              match_type: strict
              fs_types:
                - autofs
                - binfmt_misc
                - bpf
                - cgroup2
                - configfs
                - debugfs
                - devpts
                - devtmpfs
                - fusectl
                - hugetlbfs
                - iso9660
                - mqueue
                - nsfs
                - overlay
                - proc
                - procfs
                - pstore
                - rpc_pipefs
                - securityfs
                - selinuxfs
                - squashfs
                - sysfs
                - tracefs
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          # paging:
          # processes:
          # process:
          network: {}

    processors:
      batch:
        timeout: 1s
        send_batch_size: 1000
        send_batch_max_size: 2000
      k8sattributes:
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.name
        extract:
          metadata:
            - k8s.cluster.uid
            - k8s.namespace.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.node.name
            - k8s.pod.start_time
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.replicaset.uid
            - k8s.daemonset.name
            - k8s.daemonset.uid
            - k8s.job.name
            - k8s.job.uid
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.statefulset.uid
            - container.image.tag
            - container.image.name

    exporters:
      otlp/opsramp_metrics:
        endpoint: {{ include "otel.endpoint.metrics" . | trim | quote }}
        headers:
          "tenantId": {{ include "otel.auth.tenantId" . | trim | quote }}
        compression: "gzip"
        tls:
          insecure: false
          insecure_skip_verify: true
        auth:
          authenticator: oauth2client

    extensions:
      oauth2client:
        client_id: {{ include "otel.auth.key" . | trim | quote }}
        client_secret: {{ include "otel.auth.secret" . | trim | quote }}
        token_url: {{ include "otel.auth.endpoint" . | trim | quote }}

    service:
      extensions:
        - oauth2client
      pipelines:
        metrics:
          receivers: [ prometheus, otlp, kubeletstats, hostmetrics, k8s_cluster ]
          processors: [ batch, k8sattributes ]
          exporters: [ otlp/opsramp_metrics ]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ include "opsramp-cloud-stack.fullname" . }}-metrics
rules:
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - alertmanagers
      - alertmanagers/finalizers
      - alertmanagers/status
      - alertmanagerconfigs
      - prometheuses
      - prometheuses/finalizers
      - prometheuses/status
      - prometheusagents
      - prometheusagents/finalizers
      - prometheusagents/status
      - thanosrulers
      - thanosrulers/finalizers
      - thanosrulers/status
      - scrapeconfigs
      - servicemonitors
      - podmonitors
      - probes
      - prometheusrules
    verbs:
      - '*'
  - apiGroups: [ "" ]
    resources:
      - events
      - namespaces
      - namespaces/status
      - nodes
      - nodes/stats
      - nodes/spec
      - nodes/proxy
      - nodes/metrics
      - services
      - resourcequotas
      - replicationcontrollers
      - replicationcontrollers/status
      - endpoints
      - persistentvolumes
      - persistentvolumeclaims
      - pods
      - pods/status
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs: [ "get", "list", "watch" ]
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs: [ "get", "list", "watch" ]
  - apiGroups: [ "discovery.k8s.io" ]
    resources:
      - endpointslices
    verbs: [ "get", "list", "watch" ]
  - nonResourceURLs: [ "/metrics", "/metrics/cadvisor" ]
    verbs: [ "get" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "opsramp-cloud-stack.fullname" . }}-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ include "opsramp-cloud-stack.fullname" . }}-metrics
subjects:
  - kind: ServiceAccount
    # quirk of the Operator
    name: "{{ include "opsramp-cloud-stack.fullname" . }}-metrics-collector"
    namespace: {{ $.Release.Namespace }}